import "../../polyfill";
import { Cache } from "../Cache";
import { StrategyOptions } from "../types";
declare type SolidityCompilersList = {
    builds: object[];
    latestRelease: string;
    releases: object;
};
export declare class VersionRange {
    config: StrategyOptions;
    cache: Cache;
    constructor(options: StrategyOptions);
    load(versionRange: string): Promise<any>;
    list(index?: number): any;
    compilerFromString(code: string): any;
    findNewestValidVersion(version: string, allVersions: SolidityCompilersList): string | null;
    getCachedSolcByFileName(fileName: string): any;
    getCachedSolcByVersionRange(version: string): any;
    getCachedSolcFileName(commit: string): string | undefined;
    getMostRecentVersionOfCompiler(versions: string[]): string;
    getSatisfyingVersionFromCache(versionRange: string): any;
    getAndCacheSolcByUrl(fileName: string, index: number): Promise<any>;
    getSolcFromCacheOrUrl(versionConstraint: string, index?: number): any;
    getSolcVersionsForSource(urlRoot: string, attemptNumber: number): Promise<SolidityCompilersList>;
    getSolcVersionFileName(version: string, allVersions: SolidityCompilersList): string | null;
    versionIsCached(version: string): string | undefined;
}
export declare class NoUrlError extends Error {
    constructor();
}
export {};
